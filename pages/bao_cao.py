import streamlit as st
import pandas as pd
import numpy as np
import sqlite3
from utils import database
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
import calendar

# Thi·∫øt l·∫≠p trang
st.set_page_config(page_title="B√°o c√°o & Th·ªëng k√™", page_icon="üìä", layout="wide")

# Ki·ªÉm tra quy·ªÅn truy c·∫≠p
if "dang_nhap" not in st.session_state or not st.session_state.dang_nhap:
    st.warning("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y.")
    st.stop()

if st.session_state.quyen_han != "admin":
    st.error("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y.")
    st.stop()

st.title("B√°o c√°o & Th·ªëng k√™")

# T·∫°o tabs cho c√°c lo·∫°i b√°o c√°o kh√°c nhau
tab1, tab2, tab3 = st.tabs(["Nh√¢n s·ª±", "C√¥ng vi·ªác", "Ch·∫•m c√¥ng"])

# Tab 1: B√°o c√°o Nh√¢n s·ª±
with tab1:
    st.subheader("Ph√¢n t√≠ch nh√¢n s·ª±")
    
    # K·∫øt n·ªëi CSDL
    conn = database.connect_db()
    if conn:
        try:
            # L·∫•y th√¥ng tin t·ªïng quan
            cursor = conn.cursor()
            
            # T·ªïng s·ªë nh√¢n vi√™n
            cursor.execute("SELECT COUNT(*) FROM NhanVien")
            tong_nhan_vien = cursor.fetchone()[0]
            
            # Ph√¢n b·ªë theo ph√≤ng ban
            cursor.execute("""
                SELECT PhongBan.TenPhongBan, COUNT(NhanVien.MaNhanVien) as SoLuong
                FROM NhanVien 
                JOIN PhongBan ON NhanVien.PhongBanID = PhongBan.PhongBanID
                GROUP BY PhongBan.TenPhongBan
            """)
            phan_bo_phong_ban = cursor.fetchall()
            
            # Ph√¢n b·ªë theo v·ªã tr√≠
            cursor.execute("""
                SELECT ViTri.TenViTri, COUNT(NhanVien.MaNhanVien) as SoLuong
                FROM NhanVien 
                JOIN ViTri ON NhanVien.ViTriID = ViTri.ViTriID
                GROUP BY ViTri.TenViTri
            """)
            phan_bo_vi_tri = cursor.fetchall()
            
            # Ph√¢n b·ªë gi·ªõi t√≠nh
            cursor.execute("""
                SELECT GioiTinh, COUNT(*) as SoLuong
                FROM NhanVien
                GROUP BY GioiTinh
            """)
            phan_bo_gioi_tinh = cursor.fetchall()
            
            # Th√¢m ni√™n l√†m vi·ªác
            cursor.execute("""
                SELECT 
                    CASE 
                        WHEN julianday('now') - julianday(NgayVaoCongTy) < 365 THEN 'D∆∞·ªõi 1 nƒÉm'
                        WHEN julianday('now') - julianday(NgayVaoCongTy) < 365*3 THEN '1-3 nƒÉm'
                        WHEN julianday('now') - julianday(NgayVaoCongTy) < 365*5 THEN '3-5 nƒÉm'
                        ELSE 'Tr√™n 5 nƒÉm'
                    END as ThamNien,
                    COUNT(*) as SoLuong
                FROM NhanVien
                WHERE NgayVaoCongTy IS NOT NULL
                GROUP BY ThamNien
            """)
            phan_bo_tham_nien = cursor.fetchall()
            
            # Hi·ªÉn th·ªã t·ªïng quan
            st.markdown("### T·ªïng quan nh√¢n s·ª±")
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("T·ªïng s·ªë nh√¢n vi√™n", tong_nhan_vien)
            
            with col2:
                phan_bo_nam_nu = {row[0]: row[1] for row in phan_bo_gioi_tinh}
                so_nam = phan_bo_nam_nu.get("Nam", 0)
                so_nu = phan_bo_nam_nu.get("N·ªØ", 0)
                ty_le_nam = (so_nam / tong_nhan_vien * 100) if tong_nhan_vien > 0 else 0
                st.metric("T·ª∑ l·ªá Nam/N·ªØ", f"{ty_le_nam:.1f}% / {100-ty_le_nam:.1f}%")
            
            with col3:
                # S·ªë nh√¢n vi√™n m·ªõi (v√†o c√¥ng ty trong 3 th√°ng g·∫ßn ƒë√¢y)
                ba_thang_truoc = (datetime.now() - timedelta(days=90)).strftime("%Y-%m-%d")
                cursor.execute(
                    "SELECT COUNT(*) FROM NhanVien WHERE NgayVaoCongTy >= ?", 
                    (ba_thang_truoc,)
                )
                nhan_vien_moi = cursor.fetchone()[0]
                st.metric("Nh√¢n vi√™n m·ªõi (3 th√°ng)", nhan_vien_moi)
            
            with col4:
                # T√¨m ph√≤ng ban c√≥ nhi·ªÅu nh√¢n vi√™n nh·∫•t
                if phan_bo_phong_ban:
                    phong_ban_max = max(phan_bo_phong_ban, key=lambda x: x[1])
                    st.metric("Ph√≤ng ban ƒë√¥ng nh·∫•t", f"{phong_ban_max[0]} ({phong_ban_max[1]})")
                else:
                    st.metric("Ph√≤ng ban ƒë√¥ng nh·∫•t", "Kh√¥ng c√≥ d·ªØ li·ªáu")
            
            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
            st.markdown("### Ph√¢n b·ªë nh√¢n vi√™n")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Bi·ªÉu ƒë·ªì ph√¢n b·ªë theo ph√≤ng ban
                if phan_bo_phong_ban:
                    df_phong_ban = pd.DataFrame(phan_bo_phong_ban, columns=["Ph√≤ng ban", "S·ªë l∆∞·ª£ng"])
                    fig = px.pie(
                        df_phong_ban, 
                        values="S·ªë l∆∞·ª£ng", 
                        names="Ph√≤ng ban", 
                        title="Ph√¢n b·ªë nh√¢n vi√™n theo ph√≤ng ban",
                        hole=0.4
                    )
                    st.plotly_chart(fig)
                else:
                    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n b·ªë theo ph√≤ng ban.")
            
            with col2:
                # Bi·ªÉu ƒë·ªì ph√¢n b·ªë theo v·ªã tr√≠
                if phan_bo_vi_tri:
                    df_vi_tri = pd.DataFrame(phan_bo_vi_tri, columns=["V·ªã tr√≠", "S·ªë l∆∞·ª£ng"])
                    fig = px.bar(
                        df_vi_tri, 
                        x="V·ªã tr√≠", 
                        y="S·ªë l∆∞·ª£ng", 
                        title="Ph√¢n b·ªë nh√¢n vi√™n theo v·ªã tr√≠",
                        color="S·ªë l∆∞·ª£ng"
                    )
                    st.plotly_chart(fig)
                else:
                    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n b·ªë theo v·ªã tr√≠.")
            
            # Bi·ªÉu ƒë·ªì th√¢m ni√™n v√† gi·ªõi t√≠nh
            col1, col2 = st.columns(2)
            
            with col1:
                # Bi·ªÉu ƒë·ªì ph√¢n b·ªë theo th√¢m ni√™n
                if phan_bo_tham_nien:
                    df_tham_nien = pd.DataFrame(phan_bo_tham_nien, columns=["Th√¢m ni√™n", "S·ªë l∆∞·ª£ng"])
                    # S·∫Øp x·∫øp th·ª© t·ª± th√¢m ni√™n
                    order = ["D∆∞·ªõi 1 nƒÉm", "1-3 nƒÉm", "3-5 nƒÉm", "Tr√™n 5 nƒÉm"]
                    df_tham_nien["Th√¢m ni√™n"] = pd.Categorical(df_tham_nien["Th√¢m ni√™n"], categories=order, ordered=True)
                    df_tham_nien = df_tham_nien.sort_values("Th√¢m ni√™n")
                    
                    fig = px.pie(
                        df_tham_nien, 
                        values="S·ªë l∆∞·ª£ng", 
                        names="Th√¢m ni√™n", 
                        title="Ph√¢n b·ªë nh√¢n vi√™n theo th√¢m ni√™n"
                    )
                    st.plotly_chart(fig)
                else:
                    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu th√¢m ni√™n.")
            
            with col2:
                # Bi·ªÉu ƒë·ªì ph√¢n b·ªë theo gi·ªõi t√≠nh
                if phan_bo_gioi_tinh:
                    df_gioi_tinh = pd.DataFrame(phan_bo_gioi_tinh, columns=["Gi·ªõi t√≠nh", "S·ªë l∆∞·ª£ng"])
                    fig = px.pie(
                        df_gioi_tinh, 
                        values="S·ªë l∆∞·ª£ng", 
                        names="Gi·ªõi t√≠nh", 
                        title="Ph√¢n b·ªë nh√¢n vi√™n theo gi·ªõi t√≠nh",
                        color_discrete_map={"Nam": "#1f77b4", "N·ªØ": "#ff7f0e", "Kh√°c": "#2ca02c"}
                    )
                    st.plotly_chart(fig)
                else:
                    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu gi·ªõi t√≠nh.")
        
        except sqlite3.Error as e:
            st.error(f"L·ªói truy v·∫•n CSDL: {e}")
        
        finally:
            database.close_db(conn)
    else:
        st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu.")

# Tab 2: B√°o c√°o C√¥ng vi·ªác
with tab2:
    st.subheader("Ph√¢n t√≠ch c√¥ng vi·ªác")
    
    # K·∫øt n·ªëi CSDL
    conn = database.connect_db()
    if conn:
        try:
            cursor = conn.cursor()
            
            # T·ªïng s·ªë c√¥ng vi·ªác
            cursor.execute("SELECT COUNT(*) FROM CongViec")
            tong_cong_viec = cursor.fetchone()[0]
            
            # C√¥ng vi·ªác theo tr·∫°ng th√°i
            cursor.execute("""
                SELECT TrangThai, COUNT(*) as SoLuong
                FROM CongViec
                GROUP BY TrangThai
            """)
            phan_bo_trang_thai = cursor.fetchall()
            
            # C√¥ng vi·ªác theo m·ª©c ƒë·ªô ∆∞u ti√™n
            cursor.execute("""
                SELECT MucDoUuTien, COUNT(*) as SoLuong
                FROM CongViec
                GROUP BY MucDoUuTien
            """)
            phan_bo_uu_tien = cursor.fetchall()
            
            # C√¥ng vi·ªác qu√° h·∫°n
            today = datetime.now().strftime("%Y-%m-%d")
            cursor.execute("""
                SELECT COUNT(*) FROM CongViec
                WHERE NgayKetThuc < ? AND TrangThai != 'ƒê√£ ho√†n th√†nh'
            """, (today,))
            cong_viec_qua_han = cursor.fetchone()[0]
            
            # Hi·ªÉn th·ªã t·ªïng quan
            st.markdown("### T·ªïng quan c√¥ng vi·ªác")
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("T·ªïng s·ªë c√¥ng vi·ªác", tong_cong_viec)
            
            with col2:
                # T√≠nh t·ª∑ l·ªá ho√†n th√†nh
                if phan_bo_trang_thai:
                    trang_thai_dict = {row[0]: row[1] for row in phan_bo_trang_thai}
                    da_hoan_thanh = trang_thai_dict.get("ƒê√£ ho√†n th√†nh", 0)
                    ty_le_hoan_thanh = (da_hoan_thanh / tong_cong_viec * 100) if tong_cong_viec > 0 else 0
                    st.metric("T·ª∑ l·ªá ho√†n th√†nh", f"{ty_le_hoan_thanh:.1f}%")
                else:
                    st.metric("T·ª∑ l·ªá ho√†n th√†nh", "0%")
            
            with col3:
                st.metric("C√¥ng vi·ªác qu√° h·∫°n", cong_viec_qua_han)
            
            with col4:
                # C√¥ng vi·ªác ∆∞u ti√™n cao ch∆∞a ho√†n th√†nh
                cursor.execute("""
                    SELECT COUNT(*) FROM CongViec
                    WHERE MucDoUuTien = 'Cao' AND TrangThai != 'ƒê√£ ho√†n th√†nh'
                """)
                cong_viec_uu_tien_cao = cursor.fetchone()[0]
                st.metric("C√¥ng vi·ªác ∆∞u ti√™n cao", cong_viec_uu_tien_cao)
            
            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n t√≠ch
            st.markdown("### Ph√¢n t√≠ch chi ti·∫øt")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Bi·ªÉu ƒë·ªì theo tr·∫°ng th√°i
                if phan_bo_trang_thai:
                    df_trang_thai = pd.DataFrame(phan_bo_trang_thai, columns=["Tr·∫°ng th√°i", "S·ªë l∆∞·ª£ng"])
                    fig = px.pie(
                        df_trang_thai, 
                        values="S·ªë l∆∞·ª£ng", 
                        names="Tr·∫°ng th√°i", 
                        title="Ph√¢n b·ªë c√¥ng vi·ªác theo tr·∫°ng th√°i",
                        color_discrete_map={
                            "ƒê√£ ho√†n th√†nh": "#4caf50",
                            "ƒêang th·ª±c hi·ªán": "#2196f3",
                            "Ch∆∞a ho√†n th√†nh": "#ff9800"
                        }
                    )
                    st.plotly_chart(fig)
                else:
                    st.info("Ch∆∞a c√≥ d·ªØ li·ªáu c√¥ng vi·ªác.")
            
            with col2:
                # Bi·ªÉu ƒë·ªì theo m·ª©c ƒë·ªô ∆∞u ti√™n
                if phan_bo_uu_tien:
                    df_uu_tien = pd.DataFrame(phan_bo_uu_tien, columns=["M·ª©c ƒë·ªô ∆∞u ti√™n", "S·ªë l∆∞·ª£ng"])
                    fig = px.bar(
                        df_uu_tien, 
                        x="M·ª©c ƒë·ªô ∆∞u ti√™n", 
                        y="S·ªë l∆∞·ª£ng", 
                        title="Ph√¢n b·ªë c√¥ng vi·ªác theo m·ª©c ƒë·ªô ∆∞u ti√™n",
                        color="M·ª©c ƒë·ªô ∆∞u ti√™n",
                        color_discrete_map={
                            "Cao": "#f44336",
                            "B√¨nh th∆∞·ªùng": "#4caf50",
                            "Th·∫•p": "#2196f3"
                        }
                    )
                    st.plotly_chart(fig)
                else:
                    st.info("Ch∆∞a c√≥ d·ªØ li·ªáu c√¥ng vi·ªác.")
            
            # Bi·ªÉu ƒë·ªì ti·∫øn ƒë·ªô c√¥ng vi·ªác theo ph√≤ng ban
            st.markdown("### Ti·∫øn ƒë·ªô c√¥ng vi·ªác theo ph√≤ng ban")
            
            # L·∫•y d·ªØ li·ªáu
            cursor.execute("""
                SELECT pb.TenPhongBan,
                    SUM(CASE WHEN cv.TrangThai = 'ƒê√£ ho√†n th√†nh' THEN 1 ELSE 0 END) as HoanThanh,
                    SUM(CASE WHEN cv.TrangThai = 'ƒêang th·ª±c hi·ªán' THEN 1 ELSE 0 END) as DangThucHien,
                    SUM(CASE WHEN cv.TrangThai = 'Ch∆∞a ho√†n th√†nh' THEN 1 ELSE 0 END) as ChuaHoanThanh
                FROM CongViec cv
                JOIN NhanVien nv ON cv.MaNhanVien = nv.MaNhanVien
                JOIN PhongBan pb ON nv.PhongBanID = pb.PhongBanID
                GROUP BY pb.TenPhongBan
            """)
            tien_do_phong_ban = cursor.fetchall()
            
            if tien_do_phong_ban:
                df_tien_do = pd.DataFrame(tien_do_phong_ban, columns=[
                    "Ph√≤ng ban", "Ho√†n th√†nh", "ƒêang th·ª±c hi·ªán", "Ch∆∞a ho√†n th√†nh"
                ])
                
                # T·∫°o d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
                fig = go.Figure()
                
                fig.add_trace(go.Bar(
                    name='Ho√†n th√†nh',
                    x=df_tien_do['Ph√≤ng ban'],
                    y=df_tien_do['Ho√†n th√†nh'],
                    marker_color='#4caf50'
                ))
                
                fig.add_trace(go.Bar(
                    name='ƒêang th·ª±c hi·ªán',
                    x=df_tien_do['Ph√≤ng ban'],
                    y=df_tien_do['ƒêang th·ª±c hi·ªán'],
                    marker_color='#2196f3'
                ))
                
                fig.add_trace(go.Bar(
                    name='Ch∆∞a ho√†n th√†nh',
                    x=df_tien_do['Ph√≤ng ban'],
                    y=df_tien_do['Ch∆∞a ho√†n th√†nh'],
                    marker_color='#ff9800'
                ))
                
                # C·∫•u h√¨nh hi·ªÉn th·ªã
                fig.update_layout(
                    title='Ti·∫øn ƒë·ªô c√¥ng vi·ªác theo ph√≤ng ban',
                    xaxis_title='Ph√≤ng ban',
                    yaxis_title='S·ªë l∆∞·ª£ng c√¥ng vi·ªác',
                    barmode='stack'
                )
                
                st.plotly_chart(fig)
            else:
                st.info("Ch∆∞a c√≥ d·ªØ li·ªáu ti·∫øn ƒë·ªô c√¥ng vi·ªác theo ph√≤ng ban.")
        
        except sqlite3.Error as e:
            st.error(f"L·ªói truy v·∫•n CSDL: {e}")
        
        finally:
            database.close_db(conn)
    else:
        st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu.")

# Tab 3: B√°o c√°o Ch·∫•m c√¥ng
with tab3:
    st.subheader("Ph√¢n t√≠ch ch·∫•m c√¥ng")
    
    # K·∫øt n·ªëi CSDL
    conn = database.connect_db()
    if conn:
        try:
            cursor = conn.cursor()
            
            # L·∫•y d·ªØ li·ªáu theo th√°ng
            col1, col2 = st.columns([1, 3])
            
            with col1:
                thang_hien_tai = datetime.now().month
                nam_hien_tai = datetime.now().year
                
                chon_thang = st.selectbox(
                    "Ch·ªçn th√°ng:",
                    options=list(range(1, 13)),
                    index=thang_hien_tai - 1
                )
                
                chon_nam = st.selectbox(
                    "Ch·ªçn nƒÉm:",
                    options=list(range(2020, nam_hien_tai + 1)),
                    index=nam_hien_tai - 2020
                )
            
            # T√≠nh s·ªë ng√†y trong th√°ng ƒë√£ ch·ªçn
            so_ngay = calendar.monthrange(chon_nam, chon_thang)[1]
            ngay_dau_thang = f"{chon_nam}-{chon_thang:02d}-01"
            ngay_cuoi_thang = f"{chon_nam}-{chon_thang:02d}-{so_ngay:02d}"
            
            # T√≠nh s·ªë ng√†y l√†m vi·ªác trong th√°ng (kh√¥ng t√≠nh cu·ªëi tu·∫ßn)
            so_ngay_lam_viec = 0
            for day in range(1, so_ngay + 1):
                date = datetime(chon_nam, chon_thang, day)
                if date.weekday() < 5:  # 0-4 t∆∞∆°ng ·ª©ng v·ªõi th·ª© 2 ƒë·∫øn th·ª© 6
                    so_ngay_lam_viec += 1
            
            # L·∫•y d·ªØ li·ªáu ch·∫•m c√¥ng trong th√°ng
            cursor.execute("""
                SELECT cc.MaNhanVien, nv.HoTen, 
                    COUNT(CASE WHEN cc.TrangThai = 'ƒêi l√†m' THEN 1 END) as NgayDiLam,
                    COUNT(CASE WHEN cc.TrangThai = 'Ngh·ªâ ph√©p' THEN 1 END) as NgayNghiPhep,
                    COUNT(CASE WHEN cc.TrangThai = 'Ngh·ªâ kh√¥ng ph√©p' THEN 1 END) as NgayNghiKhongPhep
                FROM ChamCong cc
                JOIN NhanVien nv ON cc.MaNhanVien = nv.MaNhanVien
                WHERE cc.NgayLamViec BETWEEN ? AND ?
                GROUP BY cc.MaNhanVien
            """, (ngay_dau_thang, ngay_cuoi_thang))
            
            du_lieu_cham_cong = cursor.fetchall()
            
            # T·ªïng h·ª£p d·ªØ li·ªáu
            st.markdown(f"### B√°o c√°o ch·∫•m c√¥ng th√°ng {chon_thang}/{chon_nam}")
            st.markdown(f"T·ªïng s·ªë ng√†y l√†m vi·ªác trong th√°ng: **{so_ngay_lam_viec}** ng√†y")
            
            if du_lieu_cham_cong:
                # T·∫°o DataFrame
                df_cham_cong = pd.DataFrame(du_lieu_cham_cong, columns=[
                    "M√£ NV", "H·ªç t√™n", "Ng√†y ƒëi l√†m", "Ng√†y ngh·ªâ ph√©p", "Ng√†y ngh·ªâ kh√¥ng ph√©p"
                ])
                
                # Th√™m c·ªôt t·ª∑ l·ªá ƒëi l√†m
                df_cham_cong["T·ª∑ l·ªá ƒëi l√†m (%)"] = (df_cham_cong["Ng√†y ƒëi l√†m"] / so_ngay_lam_viec * 100).round(1)
                
                # Hi·ªÉn th·ªã b·∫£ng
                st.dataframe(df_cham_cong)
                
                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
                st.markdown("### So s√°nh t·ª∑ l·ªá ƒëi l√†m")
                
                fig = px.bar(
                    df_cham_cong,
                    x="H·ªç t√™n",
                    y="T·ª∑ l·ªá ƒëi l√†m (%)",
                    title=f"T·ª∑ l·ªá ƒëi l√†m th√°ng {chon_thang}/{chon_nam}",
                    color="T·ª∑ l·ªá ƒëi l√†m (%)",
                    color_continuous_scale=px.colors.sequential.Viridis
                )
                
                # Th√™m ƒë∆∞·ªùng tham chi·∫øu 100%
                fig.add_hline(
                    y=100, 
                    line_dash="dash", 
                    line_color="red",
                    annotation_text="M·ª•c ti√™u 100%", 
                    annotation_position="top right"
                )
                
                st.plotly_chart(fig)
                
                # Th·ªëng k√™ ngh·ªâ ph√©p
                st.markdown("### Th·ªëng k√™ ngh·ªâ ph√©p")
                
                df_nghi_phep = df_cham_cong[["H·ªç t√™n", "Ng√†y ngh·ªâ ph√©p", "Ng√†y ngh·ªâ kh√¥ng ph√©p"]]
                
                # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì
                df_nghi_phep_long = pd.melt(
                    df_nghi_phep, 
                    id_vars=["H·ªç t√™n"], 
                    value_vars=["Ng√†y ngh·ªâ ph√©p", "Ng√†y ngh·ªâ kh√¥ng ph√©p"],
                    var_name="Lo·∫°i ngh·ªâ", 
                    value_name="S·ªë ng√†y"
                )
                
                fig = px.bar(
                    df_nghi_phep_long,
                    x="H·ªç t√™n",
                    y="S·ªë ng√†y",
                    color="Lo·∫°i ngh·ªâ",
                    barmode="group",
                    title=f"Th·ªëng k√™ ngh·ªâ ph√©p th√°ng {chon_thang}/{chon_nam}",
                    color_discrete_map={
                        "Ng√†y ngh·ªâ ph√©p": "#2196f3",
                        "Ng√†y ngh·ªâ kh√¥ng ph√©p": "#f44336"
                    }
                )
                
                st.plotly_chart(fig)
            else:
                st.info(f"Kh√¥ng c√≥ d·ªØ li·ªáu ch·∫•m c√¥ng trong th√°ng {chon_thang}/{chon_nam}.")
        
        except sqlite3.Error as e:
            st.error(f"L·ªói truy v·∫•n CSDL: {e}")
        
        finally:
            database.close_db(conn)
    else:
        st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu.")
