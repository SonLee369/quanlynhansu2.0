import streamlit as st
import sqlite3
import pandas as pd
from utils import database
from datetime import datetime, timedelta
from components import header, profile_card, employee_card
import calendar

# Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ trang
st.set_page_config(page_title="Dashboard", page_icon="üìä", layout="wide")

# √Åp d·ª•ng CSS
with open("style.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# Ki·ªÉm tra ƒëƒÉng nh·∫≠p
if "dang_nhap" not in st.session_state or not st.session_state.dang_nhap:
    st.warning("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem dashboard.")
    st.stop()

# Hi·ªÉn th·ªã header
header.header(st.session_state.ten_nguoi_dung, st.session_state.quyen_han)

# L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
conn = database.connect_db()
if conn:
    # L·∫•y th√¥ng tin t√†i kho·∫£n
    tai_khoan = database.lay_tai_khoan_theo_ten_dang_nhap(conn, st.session_state.ten_nguoi_dung)
    
    if tai_khoan:
        # L·∫•y m√£ nh√¢n vi√™n t·ª´ th√¥ng tin t√†i kho·∫£n
        ma_nhan_vien = tai_khoan[1]
        
        # L·∫•y th√¥ng tin nh√¢n vi√™n t·ª´ b·∫£ng NhanVien
        nhan_vien = database.lay_nhan_vien_theo_id(conn, ma_nhan_vien)
        
        if nhan_vien:
            st.title(f"Xin ch√†o, {nhan_vien[1]}!")
            
            # Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n
            col1, col2, col3 = st.columns([1, 2, 1])
            
            # C·ªôt 1: Th√¥ng tin nh√¢n vi√™n + Th√†nh t√≠ch
            with col1:
                # Hi·ªÉn th·ªã profile card
                st.subheader("Th√¥ng tin c√° nh√¢n")
                profile_card.profile_card(nhan_vien)
                
                # Hi·ªÉn th·ªã th√†nh t√≠ch
                st.subheader("Th√†nh t√≠ch g·∫ßn ƒë√¢y")
                
                # L·∫•y th√†nh t√≠ch t·ª´ database
                thanh_tich = database.lay_danh_sach_thanh_tich(conn, ma_nhan_vien)
                
                if thanh_tich:
                    # S·∫Øp x·∫øp theo th·ªùi gian g·∫ßn nh·∫•t
                    thanh_tich.sort(key=lambda x: x[3] if x[3] else "", reverse=True)
                    
                    # Hi·ªÉn th·ªã 3 th√†nh t√≠ch g·∫ßn nh·∫•t
                    for tt in thanh_tich[:3]:
                        employee_card.achievement_card(tt)
                else:
                    st.info("B·∫°n ch∆∞a c√≥ th√†nh t√≠ch n√†o.")
                    
                    # Hi·ªÉn th·ªã th√†nh t√≠ch m·∫´u n·∫øu kh√¥ng c√≥ th√†nh t√≠ch th·ª±c
                    if st.session_state.quyen_han != "admin":  # Ch·ªâ hi·ªÉn th·ªã m·∫´u cho nh√¢n vi√™n th∆∞·ªùng
                        example_achievement = [
                            0,  # ID
                            "Ho√†n th√†nh xu·∫•t s·∫Øc d·ª± √°n ABC",  # Ti√™u ƒë·ªÅ
                            "Ho√†n th√†nh tr∆∞·ªõc th·ªùi h·∫°n 3 ng√†y v·ªõi ch·∫•t l∆∞·ª£ng cao",  # M√¥ t·∫£
                            datetime.now().strftime("%Y-%m-%d"),  # Ng√†y ƒë·∫°t
                            "Xu·∫•t s·∫Øc",  # Lo·∫°i th√†nh t√≠ch
                            ma_nhan_vien  # M√£ nh√¢n vi√™n
                        ]
                        employee_card.achievement_card(example_achievement)
            
            # C·ªôt 2: C√¥ng vi·ªác v√† th·ªëng k√™
            with col2:
                # Hi·ªÉn th·ªã c√°c c√¥ng vi·ªác hi·ªán t·∫°i
                st.subheader("C√¥ng vi·ªác hi·ªán t·∫°i")
                
                # L·∫•y c√¥ng vi·ªác t·ª´ database
                cong_viec = database.lay_danh_sach_cong_viec(conn, ma_nhan_vien)
                
                if cong_viec:
                    # L·ªçc c√¥ng vi·ªác ch∆∞a ho√†n th√†nh
                    cong_viec_chua_hoan_thanh = [cv for cv in cong_viec if cv[5] != "ƒê√£ ho√†n th√†nh"]
                    
                    # S·∫Øp x·∫øp theo deadline g·∫ßn nh·∫•t
                    cong_viec_chua_hoan_thanh.sort(key=lambda x: x[4] if x[4] else "")
                    
                    # Hi·ªÉn th·ªã t·ªëi ƒëa 5 c√¥ng vi·ªác
                    remaining_tasks = len(cong_viec_chua_hoan_thanh)
                    displayed_tasks = min(remaining_tasks, 5)
                    
                    for cv in cong_viec_chua_hoan_thanh[:displayed_tasks]:
                        employee_card.task_card(cv, False)
                    
                    if remaining_tasks > 5:
                        st.info(f"... v√† {remaining_tasks - 5} c√¥ng vi·ªác kh√°c. [Xem t·∫•t c·∫£](/pages/quan_ly_cong_viec)")
                else:
                    st.info("B·∫°n ch∆∞a c√≥ c√¥ng vi·ªác n√†o.")
                    
                    # Hi·ªÉn th·ªã c√¥ng vi·ªác m·∫´u n·∫øu kh√¥ng c√≥ c√¥ng vi·ªác th·ª±c
                    if st.session_state.quyen_han != "admin":  # Ch·ªâ hi·ªÉn th·ªã m·∫´u cho nh√¢n vi√™n th∆∞·ªùng
                        example_task = [
                            0,  # ID
                            "Thi·∫øt k·∫ø giao di·ªán ng∆∞·ªùi d√πng m·ªõi",  # Ti√™u ƒë·ªÅ
                            "T·∫°o m·∫´u giao di·ªán ng∆∞·ªùi d√πng cho ·ª©ng d·ª•ng di ƒë·ªông",  # M√¥ t·∫£
                            datetime.now().strftime("%Y-%m-%d"),  # Ng√†y b·∫Øt ƒë·∫ßu
                            (datetime.now() + timedelta(days=7)).strftime("%Y-%m-%d"),  # Ng√†y k·∫øt th√∫c
                            "ƒêang th·ª±c hi·ªán",  # Tr·∫°ng th√°i
                            "Cao",  # M·ª©c ƒë·ªô ∆∞u ti√™n
                            ma_nhan_vien,  # M√£ nh√¢n vi√™n
                            None  # Ng∆∞·ªùi giao
                        ]
                        employee_card.task_card(example_task, False)
                
                # Hi·ªÉn th·ªã th·ªëng k√™ ng√†y l√†m vi·ªác
                st.subheader("Th·ªëng k√™ ng√†y l√†m vi·ªác")
                
                # L·∫•y th√¥ng tin ch·∫•m c√¥ng
                thang_hien_tai = datetime.now().month
                nam_hien_tai = datetime.now().year
                
                # T√≠nh t·ªïng s·ªë ng√†y trong th√°ng
                so_ngay_trong_thang = calendar.monthrange(nam_hien_tai, thang_hien_tai)[1]
                
                # L·∫•y danh s√°ch ch·∫•m c√¥ng trong th√°ng hi·ªán t·∫°i
                ngay_dau_thang = f"{nam_hien_tai}-{thang_hien_tai:02d}-01"
                ngay_cuoi_thang = f"{nam_hien_tai}-{thang_hien_tai:02d}-{so_ngay_trong_thang:02d}"
                
                cham_cong = database.lay_danh_sach_cham_cong(
                    conn, ma_nhan_vien, ngay_dau_thang, ngay_cuoi_thang
                )
                
                # ƒê·∫øm s·ªë ng√†y ƒë√£ l√†m vi·ªác
                so_ngay_lam_viec = 0
                if cham_cong:
                    so_ngay_lam_viec = len([cc for cc in cham_cong if cc[5] == "ƒêi l√†m"])
                
                # T√≠nh t·ªïng s·ªë ng√†y l√†m vi·ªác (kh√¥ng t√≠nh th·ª© 7, ch·ªß nh·∫≠t)
                tong_so_ngay = 0
                for day in range(1, so_ngay_trong_thang + 1):
                    date = datetime(nam_hien_tai, thang_hien_tai, day)
                    if date.weekday() < 5:  # 0-4 t∆∞∆°ng ·ª©ng v·ªõi th·ª© 2 ƒë·∫øn th·ª© 6
                        tong_so_ngay += 1
                
                # Hi·ªÉn th·ªã th·∫ª ch·∫•m c√¥ng
                employee_card.attendance_card(cham_cong, tong_so_ngay, so_ngay_lam_viec)
            
            # C·ªôt 3: Ch·∫•m c√¥ng v√† th√¥ng b√°o
            with col3:
                # Hi·ªÉn th·ªã form ch·∫•m c√¥ng 
                st.subheader("Ch·∫•m c√¥ng h√¥m nay")
                
                # Ki·ªÉm tra xem ƒë√£ ch·∫•m c√¥ng h√¥m nay ch∆∞a
                today = datetime.now().date().strftime("%Y-%m-%d")
                da_cham_cong = False
                
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT * FROM ChamCong WHERE MaNhanVien = ? AND NgayLamViec = ?", 
                    (ma_nhan_vien, today)
                )
                cham_cong_hom_nay = cursor.fetchone()
                
                if cham_cong_hom_nay:
                    da_cham_cong = True
                    
                    # Hi·ªán tr·∫°ng th√°i ƒë√£ ch·∫•m c√¥ng
                    st.success(f"B·∫°n ƒë√£ ch·∫•m c√¥ng v√†o l√∫c: {cham_cong_hom_nay[3]}")
                    
                    if cham_cong_hom_nay[4]:  # N·∫øu ƒë√£ c√≥ gi·ªù ra
                        st.info(f"B·∫°n ƒë√£ check-out l√∫c: {cham_cong_hom_nay[4]}")
                    else:
                        # N√∫t check-out
                        if st.button("Check-out"):
                            gio_ra = datetime.now().strftime("%H:%M:%S")
                            database.cap_nhat_cham_cong(
                                conn, 
                                cham_cong_hom_nay[0], 
                                cham_cong_hom_nay[3], 
                                gio_ra, 
                                "ƒêi l√†m", 
                                ""
                            )
                            st.success(f"ƒê√£ check-out l√∫c: {gio_ra}")
                            st.rerun()
                else:
                    # N√∫t check-in
                    if st.button("Check-in"):
                        gio_vao = datetime.now().strftime("%H:%M:%S")
                        database.them_cham_cong(
                            conn,
                            ma_nhan_vien,
                            today,
                            gio_vao,
                            None,
                            "ƒêi l√†m",
                            ""
                        )
                        st.success(f"ƒê√£ check-in l√∫c: {gio_vao}")
                        st.rerun()
                
                # Hi·ªÉn th·ªã th√¥ng b√°o
                st.subheader("Th√¥ng b√°o g·∫ßn ƒë√¢y")
                
                # T·∫°o th√¥ng b√°o m·∫´u
                notifications = [
                    {
                        "title": "H·ªçp nh√≥m ph√≤ng Marketing",
                        "time": "H√¥m nay, 15:30",
                        "description": "Ph√≤ng h·ªçp A3, t·∫ßng 3"
                    },
                    {
                        "title": "B·∫°n c√≥ c√¥ng vi·ªác m·ªõi",
                        "time": "H√¥m qua, 09:15",
                        "description": "Thi·∫øt k·∫ø banner cho s·ª± ki·ªán th√°ng 9"
                    },
                    {
                        "title": "ƒê√°nh gi√° hi·ªáu su·∫•t Q3",
                        "time": "25/08/2023, 13:00",
                        "description": "Vui l√≤ng ho√†n th√†nh b√°o c√°o tr∆∞·ªõc ng√†y 30/08"
                    }
                ]
                
                # Hi·ªÉn th·ªã c√°c th√¥ng b√°o
                for notification in notifications:
                    st.markdown(
                        f"""
                        <div style="padding: 10px; border-radius: 8px; background-color: #f5f5f5; margin-bottom: 10px;">
                            <div style="display: flex; justify-content: space-between;">
                                <strong>{notification['title']}</strong>
                                <span style="color: #777; font-size: 0.8em;">{notification['time']}</span>
                            </div>
                            <p style="margin: 5px 0 0 0; color: #555;">{notification['description']}</p>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                
                # N√∫t xem t·∫•t c·∫£ th√¥ng b√°o
                st.markdown("<a href='#' style='display: block; text-align: center;'>Xem t·∫•t c·∫£ th√¥ng b√°o</a>", unsafe_allow_html=True)
                
                # Hi·ªÉn th·ªã l·ªãch l√†m vi·ªác
                st.subheader("L·ªãch l√†m vi·ªác")
                
                # T·∫°o m·∫´u l·ªãch l√†m vi·ªác
                today = datetime.now().date()
                weekdays = ["Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y", "Ch·ªß Nh·∫≠t"]
                
                # Hi·ªÉn th·ªã l·ªãch 7 ng√†y t·ªõi
                for i in range(7):
                    date = today + timedelta(days=i)
                    day_of_week = weekdays[date.weekday()]
                    date_str = date.strftime("%d/%m/%Y")
                    
                    # ƒê·ªãnh d·∫°ng m√†u s·∫Øc (highlight ng√†y hi·ªán t·∫°i)
                    if i == 0:
                        bg_color = "#e8f5e9"  # M√†u xanh nh·∫°t cho ng√†y hi·ªán t·∫°i
                        border_color = "#4caf50"  # Vi·ªÅn xanh ƒë·∫≠m
                    elif date.weekday() >= 5:  # Th·ª© 7 ho·∫∑c Ch·ªß nh·∫≠t
                        bg_color = "#f5f5f5"  # M√†u x√°m nh·∫°t cho ng√†y ngh·ªâ
                        border_color = "#9e9e9e"  # Vi·ªÅn x√°m ƒë·∫≠m
                    else:
                        bg_color = "#ffffff"  # M√†u tr·∫Øng cho ng√†y th∆∞·ªùng
                        border_color = "#e0e0e0"  # Vi·ªÅn x√°m nh·∫°t
                    
                    # Hi·ªÉn th·ªã ng√†y l√†m vi·ªác v·ªõi m√†u s·∫Øc t∆∞∆°ng ·ª©ng
                    st.markdown(
                        f"""
                        <div style="padding: 10px; border-radius: 8px; background-color: {bg_color}; 
                                    margin-bottom: 10px; border: 1px solid {border_color};">
                            <div style="display: flex; justify-content: space-between;">
                                <strong>{day_of_week}</strong>
                                <span>{date_str}</span>
                            </div>
                            <div style="margin-top: 5px; font-size: 0.9em;">
                                {"Gi·ªù l√†m: 8:30 - 17:30" if date.weekday() < 5 else "Ng√†y ngh·ªâ"}
                            </div>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
        else:
            st.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n.")
    else:
        st.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n.")
    
    database.close_db(conn)
else:
    st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu.") 