import streamlit as st
import datetime
from utils import database

def achievements(user_id=None, is_admin=False):
    """
    Component for managing achievements (th√†nh t√≠ch)
    
    Args:
        user_id: ID of the current user
        is_admin: Boolean indicating if the user has admin privileges
    """
    st.header("üèÜ Th√†nh T√≠ch")
    
    # Connect to database
    conn = database.connect_db()
    if not conn:
        st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu.")
        return
    
    # Tabs for different views
    tab1, tab2 = st.tabs(["Danh s√°ch th√†nh t√≠ch", "Th√™m th√†nh t√≠ch m·ªõi"])
    
    with tab1:
        st.subheader("Danh s√°ch th√†nh t√≠ch")
        
        # Filter options
        if is_admin:
            # Admin can see all achievements or filter by employee
            col1, col2 = st.columns(2)
            with col1:
                view_type = st.radio("Xem th√†nh t√≠ch", ["T·∫•t c·∫£", "Theo nh√¢n vi√™n"])
            
            with col2:
                if view_type == "Theo nh√¢n vi√™n":
                    employees = database.lay_danh_sach_nhan_vien(conn)
                    employee_options = [(emp[0], emp[1]) for emp in employees] if employees else []
                    selected_employee = st.selectbox(
                        "Ch·ªçn nh√¢n vi√™n",
                        options=[emp[0] for emp in employee_options],
                        format_func=lambda x: next((emp[1] for emp in employee_options if emp[0] == x), "")
                    )
                    achievements = database.lay_danh_sach_thanh_tich(conn, selected_employee)
                else:
                    achievements = database.lay_danh_sach_thanh_tich(conn)
        else:
            # Regular users can only see their own achievements
            achievements = database.lay_danh_sach_thanh_tich(conn, user_id)
        
        # Filter by type
        achievement_types = ["T·∫•t c·∫£", "Khen th∆∞·ªüng", "Ch·ª©ng ch·ªâ", "Gi·∫£i th∆∞·ªüng", "Kh√°c"]
        filter_type = st.selectbox("L·ªçc theo lo·∫°i th√†nh t√≠ch", achievement_types)
        
        # Apply type filter if not "All"
        if filter_type != "T·∫•t c·∫£" and achievements:
            achievements = [achievement for achievement in achievements if achievement[4] == filter_type]
        
        # Display achievements
        if achievements:
            for achievement in achievements:
                with st.expander(f"{achievement[1]} - {achievement[3]}"):
                    cols = st.columns([2, 1])
                    with cols[0]:
                        st.write(f"**M√¥ t·∫£:** {achievement[2]}")
                        st.write(f"**Ng√†y ƒë·∫°t ƒë∆∞·ª£c:** {achievement[3]}")
                    with cols[1]:
                        st.write(f"**Lo·∫°i th√†nh t√≠ch:** {achievement[4]}")
                        st.write(f"**Nh√¢n vi√™n:** {achievement[6]}")
                    
                    # Add delete button for admins
                    if is_admin:
                        if st.button("X√≥a th√†nh t√≠ch", key=f"delete_{achievement[0]}"):
                            if database.xoa_thanh_tich(conn, achievement[0]):
                                st.success("ƒê√£ x√≥a th√†nh t√≠ch th√†nh c√¥ng!")
                                st.rerun()
                            else:
                                st.error("Kh√¥ng th·ªÉ x√≥a th√†nh t√≠ch. Vui l√≤ng th·ª≠ l·∫°i.")
        else:
            st.info("Kh√¥ng c√≥ th√†nh t√≠ch n√†o.")
    
    with tab2:
        st.subheader("Th√™m th√†nh t√≠ch m·ªõi")
        
        # Only admins can add achievements for other employees
        if is_admin:
            employees = database.lay_danh_sach_nhan_vien(conn)
            employee_options = [(emp[0], emp[1]) for emp in employees] if employees else []
        
        # Form for new achievement
        with st.form("new_achievement_form"):
            title = st.text_input("Ti√™u ƒë·ªÅ th√†nh t√≠ch")
            description = st.text_area("M√¥ t·∫£ th√†nh t√≠ch")
            achievement_date = st.date_input("Ng√†y ƒë·∫°t ƒë∆∞·ª£c", datetime.date.today())
            achievement_type = st.selectbox("Lo·∫°i th√†nh t√≠ch", ["Khen th∆∞·ªüng", "Ch·ª©ng ch·ªâ", "Gi·∫£i th∆∞·ªüng", "Kh√°c"])
            
            if is_admin:
                recipient = st.selectbox(
                    "Nh√¢n vi√™n ƒë·∫°t th√†nh t√≠ch",
                    options=[emp[0] for emp in employee_options],
                    format_func=lambda x: next((emp[1] for emp in employee_options if emp[0] == x), "")
                )
            else:
                recipient = user_id  # Regular users can only add achievements for themselves
            
            submit_button = st.form_submit_button("Th√™m th√†nh t√≠ch")
            
            if submit_button:
                if title and description and achievement_date:
                    # Format dates for SQLite
                    achievement_date_str = achievement_date.strftime("%Y-%m-%d")
                    
                    # Insert new achievement
                    result = database.them_thanh_tich(
                        conn, title, description, achievement_date_str, achievement_type, recipient
                    )
                    
                    if result:
                        st.success("ƒê√£ th√™m th√†nh t√≠ch m·ªõi th√†nh c√¥ng!")
                        # Clear form
                        st.rerun()
                    else:
                        st.error("Kh√¥ng th·ªÉ th√™m th√†nh t√≠ch. Vui l√≤ng th·ª≠ l·∫°i.")
                else:
                    st.warning("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.")
    
    # Close connection
    database.close_db(conn) 